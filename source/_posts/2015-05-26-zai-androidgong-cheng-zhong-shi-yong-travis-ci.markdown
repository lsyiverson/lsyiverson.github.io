---
layout: post
title: "在Android工程中使用travis-ci"
date: 2015-05-26 22:08:43 +0800
comments: true
tags: [Android, travis-ci, continuous-integration]
published: false
---

要说travis-ci就必须要先说说持续集成（Continuous Integration）这个概念。在很多国内公司，特别是那种类似于作坊式的软件公司，根本就没有一套像样的软件开发流程，没有单元测试，没有自动化测试，更谈不上持续集成。在这种公司里面很多人可能遇到过这样的问题：

* 在软件即将交付上线时才发现影响上线的严重bug。
* 在测试环境一切正常，等集成到正式环境时出现问题。
* 本机代码运行正常，提交到版本库出现问题，不能及时发现问题。
* 开发者A实现的功能或者修复的bug，由于开发者B提交的代码导致工作不正常，而且不能及时发现。

做过软件开发的人肯定都知道，问题暴露得越早，解决的成本也就越低。临近上线时暴露的问题往往会导致产品体验下降，交付延期。如何尽早的使问题暴露呢，常见的方法有以下几种：

* 需求评审
* 设计评审
* 代码审查
* 持续集成
* 迭代测试

当然在这里我就只说一下持续集成。Martin Fowler的观点认为，项目的Bug增加与项目持续的时间并不是线性相关的，而是和时间的平方成正比。也就是说两次集成的相隔的时间越长，那么可能产生的Bug也就越多，解决Bug需要付出的工作量也就越大。需要付出的工作量越大，程序员就越是倾向于推迟到以后再进行集成，企图最后来一次性解决，结果Bug就越多，导致下次集成的工作量就越大。这样下去就陷入了一个恶性循环。如果集成真的让人感到这么痛苦，那么就应该更频繁的集成。如果方法正确，那么更频繁的集成就能减少痛苦，节省时间。

在我看来，持续集成能够带来的好处有以下这些：

* 自动化的构建
* 合并到主线的代码都会触发构建，快速得到反馈
* clean的构建环境，避免因为本地环境导致隐藏问题
* 可以方便获得最新构建和查看历史构建
* 减轻了构建人员的工作量
* 每次构建都包含BVT测试，可以保证软件质量不回退
* 快速反馈，尽早发现和尽早解决问题
* 降低后期集成的风险

